apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.AuthProxyName}}-config
  namespace: {{.Namespace}}
  labels:
    {{- range $key, $value := .GatewayLabels}}
    {{- if ne $key "app.kubernetes.io/component"}}
    {{$key}}: "{{$value}}"
    {{- end}}
    {{- end}}
    app.kubernetes.io/component: auth-proxy
data:
  config.yaml: |
    # kube-auth-proxy configuration for {{.AuthMode}} authentication mode
    auth:
      mode: "{{.AuthMode}}"
      
    {{- if eq .AuthMode "IntegratedOAuth"}}
    # OpenShift OAuth configuration
    oauth:
      issuer: "${OAUTH_ISSUER_URL}"
      clientIDFile: "/var/run/secrets/oauth/client-id"
      clientSecretFile: "/var/run/secrets/oauth/client-secret"
      
      # OAuth scopes to request
      scopes:
        - "user:info"
        - "user:check-access"
        
      # Token validation endpoint
      tokenReviewEndpoint: "https://kubernetes.default.svc.cluster.local/api/v1/tokenreviews"
      
    {{- else if eq .AuthMode "OIDC"}}
    # External OIDC configuration
    oidc:
      issuer: "{{.Gateway.Spec.Auth.OIDC.IssuerURL}}"
      clientID: "${OIDC_CLIENT_ID}"
      clientSecretFile: "/var/run/secrets/oidc/client-secret"
      
      {{- if .Gateway.Spec.Auth.OIDC.Audiences}}
      audiences:
      {{- range .Gateway.Spec.Auth.OIDC.Audiences}}
        - "{{.}}"
      {{- end}}
      {{- else}}
      audiences:
        - "openshift-cluster"
      {{- end}}
      
      # Claim mappings for user identity
      claims:
        username: "preferred_username"
        email: "email"
        groups: "groups"
        
      # JWT validation settings
      skipClientIDCheck: false
      skipIssuerCheck: false
      skipAudienceCheck: false
      
    {{- else if eq .AuthMode "None"}}
    # External webhook authentication configuration
    webhook:
      endpoint: "${WEBHOOK_ENDPOINT}"
      configFile: "/var/run/secrets/webhook/config"
      cacheTTL: "5m"
      
    {{- end}}
    
    # Server configuration
    server:
      listen: "0.0.0.0:8080"
      metricsListen: "0.0.0.0:8081"
      
      # TLS configuration for serving certificate
      tls:
        certFile: "/var/run/secrets/serving-cert/tls.crt"
        keyFile: "/var/run/secrets/serving-cert/tls.key"
        
      # Request timeout settings
      timeouts:
        read: "30s"
        write: "30s" 
        idle: "120s"
        
    # Authentication headers to set for upstream services
    headers:
      # Access token header (for service-to-service communication)
      accessToken:
        name: "x-forwarded-access-token"
        prefix: "Bearer "
        
      # User identity headers
      user:
        name: "x-forwarded-user"
        email: "x-forwarded-email"
        groups: "x-forwarded-groups"
        
      # Additional context headers
      auth:
        mode: "x-auth-mode"
        timestamp: "x-auth-timestamp"
        
    # Logging configuration
    logging:
      level: "info"
      format: "json"
      
      # Audit logging for authentication events
      audit:
        enabled: true
        logPath: "/dev/stdout"
        
    # Health check configuration
    health:
      readiness:
        path: "/readyz"
        port: 8081
      liveness:
        path: "/healthz"  
        port: 8081
        
    # Metrics configuration  
    metrics:
      enabled: true
      path: "/metrics"
      port: 8081
